-> Database Management Using Flask-SQLAlchemy Lesson  
   -> Create Models and Relationships with Flask-SQLAlchemy  
   -> 14 min to complete  
   -> By Brandon Gigous  

-> Contents  
   -> Introduction  
   -> Defining Models  
   -> Flask SQLAlchemy Table Columns  
   -> Flask SQLAlchemy One-to-Many Relationships  
   -> Foreign Keys  
   -> Backref  
   -> Summary: Defining Models and Relationships in Flask SQLAlchemy  

-> Introduction  
   -> This lesson covers creating models and relationships in Flask-SQLAlchemy  
   -> Models abstract database functionality, and relationships link data entities  
   -> Example theme: a music-sharing social media webapp  

-> Defining Models  
   -> Models represent database tables and are Python classes with attributes corresponding to table columns  
   -> Flask-SQLAlchemy provides `db.Model` as a base class for defining models  
   -> Example models for a music-sharing app:  
      ```python  
      class Role(db.Model):  
          __tablename__ = 'roles'  
          id = db.Column(db.Integer, primary_key=True)  
          name = db.Column(db.String(64), unique=True)  

          def __repr__(self):  
              return f"<Role {self.name}>"  

      class User(db.Model):  
          __tablename__ = 'users'  
          id = db.Column(db.Integer, primary_key=True)  
          username = db.Column(db.String(64), unique=True, index=True)  

          def __repr__(self):  
              return f"<User {self.username}>"  
      ```  

-> Flask SQLAlchemy Table Columns  
   -> Table columns are defined using `db.Column`  
   -> Example column types include:  
      -> `Integer`: Regular integers  
      -> `String`: Variable-length strings  
      -> `Boolean`: True/False values  
      -> `DateTime`: Date and time values  
      -> `Text`: Long text strings  
   -> Column options:  
      -> `primary_key`: Marks a column as the table's primary key  
      -> `unique`: Ensures values are unique across rows  
      -> `index`: Creates an index for faster lookups  
      -> `nullable`: Specifies whether a column can contain null values  
      -> `default`: Provides a default value for the column  

-> Flask SQLAlchemy One-to-Many Relationships  
   -> Relationships connect rows across tables (e.g., one user to one role)  
   -> Defined using `db.relationship()` and `db.ForeignKey()`  
   -> Example:  
      ```python  
      class Role(db.Model):  
          # ...  
          users = db.relationship('User', backref='role')  

      class User(db.Model):  
          # ...  
          role_id = db.Column(db.Integer, db.ForeignKey('roles.id'))  
      ```  

-> Foreign Keys  
   -> Foreign keys establish links between tables  
   -> A foreign key in one table references the primary key in another  
   -> Example:  
      -> The `role_id` column in the `User` table is a foreign key referencing the `id` column in the `Role` table  
      -> `db.ForeignKey('roles.id')` specifies the relationship  

-> Backref  
   -> The `backref` argument in `db.relationship()` creates a bidirectional relationship  
   -> Example:  
      -> Access `user.role` for the role associated with a user  
      -> Access `role.users` for all users associated with a role  

-> Additional Relationship Options  
   -> `primaryjoin` and `secondaryjoin`: Resolve ambiguity in join conditions  
   -> `lazy`: Specifies how related data is loaded (e.g., eager or lazy loading)  
   -> `order_by`: Determines the sorting of related items  
   -> `uselist`: Whether the relationship should return a list or a scalar  

-> Summary: Defining Models and Relationships in Flask SQLAlchemy  
   -> Models map Python classes to database tables, with attributes as columns  
   -> The `__tablename__` attribute overrides default table naming conventions  
   -> Relationships, such as one-to-many, link models and facilitate data queries  
   -> Key tools: `db.Model`, `db.Column`, `db.relationship()`, `db.ForeignKey()`  
   -> With this foundation, you can design more complex database models  
