-> Database Management using Flask-SQLAlchemy Lesson
   -> Querying the Database with Flask-SQLAlchemy and the Flask Shell

-> Introduction
   -> Flask SQLAlchemy provides a convenient way to manage databases and query models
   -> Flask Shell is used to interact with Flask applications through a Python interpreter

-> Flask SQLAlchemy and Flask Shell
   -> Flask Shell allows you to interact with the Flask app's context via a Python shell
   -> To start Flask Shell:
      -> Set the environment variable to `FLASK_APP=hello.py`
      -> In the terminal, type `flask shell`

-> Creating Tables with Flask SQLAlchemy
   -> Flask-SQLAlchemy automatically creates tables for all defined models using `db.create_all()`
   -> If the tables already exist, they won't be recreated; if the models change, you'll need to drop tables with `db.drop_all()` before recreating
   -> Example to create tables:
     ```python
     from hello import db
     db.create_all()
     ```

-> Dropping Tables
   -> To update tables after changing models, drop and recreate tables:
     ```python
     db.drop_all()
     db.create_all()
     ```

-> Inserting Rows Into Your Tables
   -> Insert rows by creating model instances and adding them to the database session
   -> Example:
     ```python
     admin_role = Role(name='Administrator')
     user_role = Role(name='User')
     user_paul = User(username='paul', role=admin_role)
     db.session.add(admin_role)
     db.session.add(user_role)
     db.session.add([user_paul])
     db.session.commit()
     ```

-> Flask SQLAlchemy Database Session
   -> Add objects to the session using `db.session.add()` and commit with `db.session.commit()`
   -> Committing a session writes data to the database
   -> Session errors cause an "undo" of all changes, so group related changes together
   -> Example:
     ```python
     db.session.add(admin_role)
     db.session.add(user_role)
     db.session.commit()
     ```

-> Modifying and Deleting Rows
   -> To modify a row, change the attributes of the model instance, then commit:
     ```python
     admin_role.name = 'Admin'
     db.session.commit()
     ```
   -> To delete a row, use `db.session.delete()`, then commit:
     ```python
     db.session.delete(user_jan)
     db.session.commit()
     ```

-> Basic Queries and Filtering
   -> Query all data from a table using `.all()`
     ```python
     Role.query.all()
     User.query.all()
     ```
   -> Filter queries with `.filter_by()` to get specific data
     ```python
     User.query.filter_by(role=user_role).all()
     ```

-> Query Executor
   -> Common query methods include `.all()`, `.first()`, `.get()`, `.count()`, `.paginate()`
   -> Example of limiting results:
     ```python
     User.query.filter_by(role=user_role).limit(1).all()
     ```

-> Query Relationships
   -> Query relationships like a list (e.g., `role.users`), which implicitly executes a query
   -> Example:
     ```python
     users = user_role.users
     print(users)
     ```

-> Flask SQLAlchemy Lazy Loading
   -> Lazy loading loads data only when accessed, optimising performance
   -> To use lazy loading, define relationships with `lazy='dynamic'`
     ```python
     users = user_role.users.order_by(User.username).all()
     ```

-> Flask SQLAlchemy Lazy Values
   -> Common lazy loading options include:
      -> `dynamic`: Query is not executed until needed
      -> `immediate`: Executes query immediately
      -> `joined`: Loads data using a join
      -> `noload`: Data is not loaded automatically
      -> `select`: Uses a select statement for loading data

-> Flask Shell Context Processor
   -> Use `@app.shell_context_processor` to automatically import models into the Flask shell session
     ```python
     @app.shell_context_processor
     def make_shell_context():
         return dict(db=db, User=User, Role=Role)
     ```
   -> This eliminates the need to manually import models each time you start a new shell session

-> Summary
   -> You've learned how to create and manage tables, insert, modify, and delete data, and query the database
   -> Flask-SQLAlchemy simplifies interactions with the database and improves efficiency in querying data
   -> Key operations:
      -> `db.create_all()` to create tables
      -> `db.session.add()` to add data
      -> `db.session.commit()` to save data
      -> Query with `.all()`, `.filter_by()`, `.first()`, etc.
   -> Lazy loading allows you to optimise performance by loading data only when needed
